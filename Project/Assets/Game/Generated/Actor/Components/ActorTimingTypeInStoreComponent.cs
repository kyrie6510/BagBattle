//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ActorEntity {

    static readonly Game.TimingTypeInStoreComponent timingTypeInStoreComponent = new Game.TimingTypeInStoreComponent();

    public bool isTimingTypeInStore {
        get { return HasComponent(ActorComponentsLookup.TimingTypeInStore); }
        set {
            if (value != isTimingTypeInStore) {
                var index = ActorComponentsLookup.TimingTypeInStore;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : timingTypeInStoreComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ActorMatcher {

    static Entitas.IMatcher<ActorEntity> _matcherTimingTypeInStore;

    public static Entitas.IMatcher<ActorEntity> TimingTypeInStore {
        get {
            if (_matcherTimingTypeInStore == null) {
                var matcher = (Entitas.Matcher<ActorEntity>)Entitas.Matcher<ActorEntity>.AllOf(ActorComponentsLookup.TimingTypeInStore);
                matcher.componentNames = ActorComponentsLookup.componentNames;
                _matcherTimingTypeInStore = matcher;
            }

            return _matcherTimingTypeInStore;
        }
    }
}
