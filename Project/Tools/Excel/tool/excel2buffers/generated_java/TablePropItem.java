// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TablePropItemRowData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static TablePropItemRowData getRootAsTablePropItemRowData(ByteBuffer _bb) { return getRootAsTablePropItemRowData(_bb, new TablePropItemRowData()); }
  public static TablePropItemRowData getRootAsTablePropItemRowData(ByteBuffer _bb, TablePropItemRowData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TablePropItemRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Id() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String Name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer NameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public short PropType() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int ItemGridType(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int ItemGridTypeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector ItemGridTypeVector() { return ItemGridTypeVector(new IntVector()); }
  public IntVector ItemGridTypeVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer ItemGridTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer ItemGridTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public float Power() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int Rate() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float Interval() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int Damage(int j) { int o = __offset(18); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int DamageLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public IntVector DamageVector() { return DamageVector(new IntVector()); }
  public IntVector DamageVector(IntVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer DamageAsByteBuffer() { return __vector_as_bytebuffer(18, 4); }
  public ByteBuffer DamageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 4); }
  public short Cost() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short Width() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short Height() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short UIWidth() { int o = __offset(26); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short UIHeight() { int o = __offset(28); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String TexturePath() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TexturePathAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer TexturePathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }

  public static int createTablePropItemRowData(FlatBufferBuilder builder,
      short Id,
      int NameOffset,
      short PropType,
      int ItemGridTypeOffset,
      float Power,
      int Rate,
      float Interval,
      int DamageOffset,
      short Cost,
      short Width,
      short Height,
      short UIWidth,
      short UIHeight,
      int TexturePathOffset) {
    builder.startTable(14);
    TablePropItemRowData.addTexturePath(builder, TexturePathOffset);
    TablePropItemRowData.addDamage(builder, DamageOffset);
    TablePropItemRowData.addInterval(builder, Interval);
    TablePropItemRowData.addRate(builder, Rate);
    TablePropItemRowData.addPower(builder, Power);
    TablePropItemRowData.addItemGridType(builder, ItemGridTypeOffset);
    TablePropItemRowData.addName(builder, NameOffset);
    TablePropItemRowData.addUIHeight(builder, UIHeight);
    TablePropItemRowData.addUIWidth(builder, UIWidth);
    TablePropItemRowData.addHeight(builder, Height);
    TablePropItemRowData.addWidth(builder, Width);
    TablePropItemRowData.addCost(builder, Cost);
    TablePropItemRowData.addPropType(builder, PropType);
    TablePropItemRowData.addId(builder, Id);
    return TablePropItemRowData.endTablePropItemRowData(builder);
  }

  public static void startTablePropItemRowData(FlatBufferBuilder builder) { builder.startTable(14); }
  public static void addId(FlatBufferBuilder builder, short Id) { builder.addShort(0, Id, 0); }
  public static void addName(FlatBufferBuilder builder, int NameOffset) { builder.addOffset(1, NameOffset, 0); }
  public static void addPropType(FlatBufferBuilder builder, short PropType) { builder.addShort(2, PropType, 0); }
  public static void addItemGridType(FlatBufferBuilder builder, int ItemGridTypeOffset) { builder.addOffset(3, ItemGridTypeOffset, 0); }
  public static int createItemGridTypeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startItemGridTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPower(FlatBufferBuilder builder, float Power) { builder.addFloat(4, Power, 0.0f); }
  public static void addRate(FlatBufferBuilder builder, int Rate) { builder.addInt(5, Rate, 0); }
  public static void addInterval(FlatBufferBuilder builder, float Interval) { builder.addFloat(6, Interval, 0.0f); }
  public static void addDamage(FlatBufferBuilder builder, int DamageOffset) { builder.addOffset(7, DamageOffset, 0); }
  public static int createDamageVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDamageVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCost(FlatBufferBuilder builder, short Cost) { builder.addShort(8, Cost, 0); }
  public static void addWidth(FlatBufferBuilder builder, short Width) { builder.addShort(9, Width, 0); }
  public static void addHeight(FlatBufferBuilder builder, short Height) { builder.addShort(10, Height, 0); }
  public static void addUIWidth(FlatBufferBuilder builder, short UIWidth) { builder.addShort(11, UIWidth, 0); }
  public static void addUIHeight(FlatBufferBuilder builder, short UIHeight) { builder.addShort(12, UIHeight, 0); }
  public static void addTexturePath(FlatBufferBuilder builder, int TexturePathOffset) { builder.addOffset(13, TexturePathOffset, 0); }
  public static int endTablePropItemRowData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TablePropItemRowData get(int j) { return get(new TablePropItemRowData(), j); }
    public TablePropItemRowData get(TablePropItemRowData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

@SuppressWarnings("unused")
public final class TablePropItem extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static TablePropItem getRootAsTablePropItem(ByteBuffer _bb) { return getRootAsTablePropItem(_bb, new TablePropItem()); }
  public static TablePropItem getRootAsTablePropItem(ByteBuffer _bb, TablePropItem obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TablePropItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TablePropItemRowData datalist(int j) { return datalist(new TablePropItemRowData(), j); }
  public TablePropItemRowData datalist(TablePropItemRowData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int datalistLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public TablePropItemRowData.Vector datalistVector() { return datalistVector(new TablePropItemRowData.Vector()); }
  public TablePropItemRowData.Vector datalistVector(TablePropItemRowData.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTablePropItem(FlatBufferBuilder builder,
      int datalistOffset) {
    builder.startTable(1);
    TablePropItem.addDatalist(builder, datalistOffset);
    return TablePropItem.endTablePropItem(builder);
  }

  public static void startTablePropItem(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDatalist(FlatBufferBuilder builder, int datalistOffset) { builder.addOffset(0, datalistOffset, 0); }
  public static int createDatalistVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDatalistVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTablePropItem(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TablePropItem get(int j) { return get(new TablePropItem(), j); }
    public TablePropItem get(TablePropItem obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

