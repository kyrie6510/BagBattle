// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TableEffectRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TableEffectRowData GetRootAsTableEffectRowData(ByteBuffer _bb) { return GetRootAsTableEffectRowData(_bb, new TableEffectRowData()); }
  public static TableEffectRowData GetRootAsTableEffectRowData(ByteBuffer _bb, TableEffectRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TableEffectRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int EffectTarget { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectClass { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<TableEffectRowData> CreateTableEffectRowData(FlatBufferBuilder builder,
      short Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int EffectTarget = 0,
      int EffectType = 0,
      int EffectClass = 0,
      int EffectValue = 0) {
    builder.StartTable(6);
    TableEffectRowData.AddEffectValue(builder, EffectValue);
    TableEffectRowData.AddEffectClass(builder, EffectClass);
    TableEffectRowData.AddEffectType(builder, EffectType);
    TableEffectRowData.AddEffectTarget(builder, EffectTarget);
    TableEffectRowData.AddName(builder, NameOffset);
    TableEffectRowData.AddId(builder, Id);
    return TableEffectRowData.EndTableEffectRowData(builder);
  }

  public static void StartTableEffectRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, short Id) { builder.AddShort(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddEffectTarget(FlatBufferBuilder builder, int EffectTarget) { builder.AddInt(2, EffectTarget, 0); }
  public static void AddEffectType(FlatBufferBuilder builder, int EffectType) { builder.AddInt(3, EffectType, 0); }
  public static void AddEffectClass(FlatBufferBuilder builder, int EffectClass) { builder.AddInt(4, EffectClass, 0); }
  public static void AddEffectValue(FlatBufferBuilder builder, int EffectValue) { builder.AddInt(5, EffectValue, 0); }
  public static Offset<TableEffectRowData> EndTableEffectRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TableEffectRowData>(o);
  }
};

public struct TableEffect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TableEffect GetRootAsTableEffect(ByteBuffer _bb) { return GetRootAsTableEffect(_bb, new TableEffect()); }
  public static TableEffect GetRootAsTableEffect(ByteBuffer _bb, TableEffect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TableEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TableEffectRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (TableEffectRowData?)(new TableEffectRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TableEffect> CreateTableEffect(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TableEffect.AddDatalist(builder, datalistOffset);
    return TableEffect.EndTableEffect(builder);
  }

  public static void StartTableEffect(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<TableEffectRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<TableEffectRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TableEffect> EndTableEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TableEffect>(o);
  }
};

