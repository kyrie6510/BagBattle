// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TablePropItemRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TablePropItemRowData GetRootAsTablePropItemRowData(ByteBuffer _bb) { return GetRootAsTablePropItemRowData(_bb, new TablePropItemRowData()); }
  public static TablePropItemRowData GetRootAsTablePropItemRowData(ByteBuffer _bb, TablePropItemRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TablePropItemRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public short PropType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public int ItemGridType(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemGridTypeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemGridTypeBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetItemGridTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetItemGridTypeArray() { return __p.__vector_as_array<int>(10); }
  public float Power { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Rate { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Interval { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Damage(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DamageLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDamageBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetDamageBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetDamageArray() { return __p.__vector_as_array<int>(18); }
  public short Cost { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Width { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Height { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public int TarStarType(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TarStarTypeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTarStarTypeBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetTarStarTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetTarStarTypeArray() { return __p.__vector_as_array<int>(26); }
  public int ExTarStarId(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExTarStarIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExTarStarIdBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetExTarStarIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetExTarStarIdArray() { return __p.__vector_as_array<int>(28); }
  public int ListenTarget(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ListenTargetLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetListenTargetBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetListenTargetBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetListenTargetArray() { return __p.__vector_as_array<int>(30); }
  public int ListenType(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ListenTypeLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetListenTypeBytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetListenTypeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetListenTypeArray() { return __p.__vector_as_array<int>(32); }
  public int ListenValue(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ListenValueLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetListenValueBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetListenValueBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetListenValueArray() { return __p.__vector_as_array<int>(34); }
  public int EffectId(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EffectIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEffectIdBytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetEffectIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetEffectIdArray() { return __p.__vector_as_array<int>(36); }
  public int EffectOfListen(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EffectOfListenLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEffectOfListenBytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetEffectOfListenBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetEffectOfListenArray() { return __p.__vector_as_array<int>(38); }
  public short UIWidth { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short UIHeight { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string EffectDes { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectDesBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetEffectDesBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetEffectDesArray() { return __p.__vector_as_array<byte>(44); }
  public string TexturePath { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTexturePathBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetTexturePathBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetTexturePathArray() { return __p.__vector_as_array<byte>(46); }

  public static Offset<TablePropItemRowData> CreateTablePropItemRowData(FlatBufferBuilder builder,
      short Id = 0,
      StringOffset NameOffset = default(StringOffset),
      short PropType = 0,
      VectorOffset ItemGridTypeOffset = default(VectorOffset),
      float Power = 0.0f,
      int Rate = 0,
      float Interval = 0.0f,
      VectorOffset DamageOffset = default(VectorOffset),
      short Cost = 0,
      short Width = 0,
      short Height = 0,
      VectorOffset TarStarTypeOffset = default(VectorOffset),
      VectorOffset ExTarStarIdOffset = default(VectorOffset),
      VectorOffset ListenTargetOffset = default(VectorOffset),
      VectorOffset ListenTypeOffset = default(VectorOffset),
      VectorOffset ListenValueOffset = default(VectorOffset),
      VectorOffset EffectIdOffset = default(VectorOffset),
      VectorOffset EffectOfListenOffset = default(VectorOffset),
      short UIWidth = 0,
      short UIHeight = 0,
      StringOffset EffectDesOffset = default(StringOffset),
      StringOffset TexturePathOffset = default(StringOffset)) {
    builder.StartTable(22);
    TablePropItemRowData.AddTexturePath(builder, TexturePathOffset);
    TablePropItemRowData.AddEffectDes(builder, EffectDesOffset);
    TablePropItemRowData.AddEffectOfListen(builder, EffectOfListenOffset);
    TablePropItemRowData.AddEffectId(builder, EffectIdOffset);
    TablePropItemRowData.AddListenValue(builder, ListenValueOffset);
    TablePropItemRowData.AddListenType(builder, ListenTypeOffset);
    TablePropItemRowData.AddListenTarget(builder, ListenTargetOffset);
    TablePropItemRowData.AddExTarStarId(builder, ExTarStarIdOffset);
    TablePropItemRowData.AddTarStarType(builder, TarStarTypeOffset);
    TablePropItemRowData.AddDamage(builder, DamageOffset);
    TablePropItemRowData.AddInterval(builder, Interval);
    TablePropItemRowData.AddRate(builder, Rate);
    TablePropItemRowData.AddPower(builder, Power);
    TablePropItemRowData.AddItemGridType(builder, ItemGridTypeOffset);
    TablePropItemRowData.AddName(builder, NameOffset);
    TablePropItemRowData.AddUIHeight(builder, UIHeight);
    TablePropItemRowData.AddUIWidth(builder, UIWidth);
    TablePropItemRowData.AddHeight(builder, Height);
    TablePropItemRowData.AddWidth(builder, Width);
    TablePropItemRowData.AddCost(builder, Cost);
    TablePropItemRowData.AddPropType(builder, PropType);
    TablePropItemRowData.AddId(builder, Id);
    return TablePropItemRowData.EndTablePropItemRowData(builder);
  }

  public static void StartTablePropItemRowData(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, short Id) { builder.AddShort(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddPropType(FlatBufferBuilder builder, short PropType) { builder.AddShort(2, PropType, 0); }
  public static void AddItemGridType(FlatBufferBuilder builder, VectorOffset ItemGridTypeOffset) { builder.AddOffset(3, ItemGridTypeOffset.Value, 0); }
  public static VectorOffset CreateItemGridTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemGridTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemGridTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPower(FlatBufferBuilder builder, float Power) { builder.AddFloat(4, Power, 0.0f); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(5, Rate, 0); }
  public static void AddInterval(FlatBufferBuilder builder, float Interval) { builder.AddFloat(6, Interval, 0.0f); }
  public static void AddDamage(FlatBufferBuilder builder, VectorOffset DamageOffset) { builder.AddOffset(7, DamageOffset.Value, 0); }
  public static VectorOffset CreateDamageVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDamageVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDamageVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCost(FlatBufferBuilder builder, short Cost) { builder.AddShort(8, Cost, 0); }
  public static void AddWidth(FlatBufferBuilder builder, short Width) { builder.AddShort(9, Width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, short Height) { builder.AddShort(10, Height, 0); }
  public static void AddTarStarType(FlatBufferBuilder builder, VectorOffset TarStarTypeOffset) { builder.AddOffset(11, TarStarTypeOffset.Value, 0); }
  public static VectorOffset CreateTarStarTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTarStarTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTarStarTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExTarStarId(FlatBufferBuilder builder, VectorOffset ExTarStarIdOffset) { builder.AddOffset(12, ExTarStarIdOffset.Value, 0); }
  public static VectorOffset CreateExTarStarIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExTarStarIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartExTarStarIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddListenTarget(FlatBufferBuilder builder, VectorOffset ListenTargetOffset) { builder.AddOffset(13, ListenTargetOffset.Value, 0); }
  public static VectorOffset CreateListenTargetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateListenTargetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartListenTargetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddListenType(FlatBufferBuilder builder, VectorOffset ListenTypeOffset) { builder.AddOffset(14, ListenTypeOffset.Value, 0); }
  public static VectorOffset CreateListenTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateListenTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartListenTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddListenValue(FlatBufferBuilder builder, VectorOffset ListenValueOffset) { builder.AddOffset(15, ListenValueOffset.Value, 0); }
  public static VectorOffset CreateListenValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateListenValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartListenValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectId(FlatBufferBuilder builder, VectorOffset EffectIdOffset) { builder.AddOffset(16, EffectIdOffset.Value, 0); }
  public static VectorOffset CreateEffectIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEffectIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffectOfListen(FlatBufferBuilder builder, VectorOffset EffectOfListenOffset) { builder.AddOffset(17, EffectOfListenOffset.Value, 0); }
  public static VectorOffset CreateEffectOfListenVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEffectOfListenVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectOfListenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUIWidth(FlatBufferBuilder builder, short UIWidth) { builder.AddShort(18, UIWidth, 0); }
  public static void AddUIHeight(FlatBufferBuilder builder, short UIHeight) { builder.AddShort(19, UIHeight, 0); }
  public static void AddEffectDes(FlatBufferBuilder builder, StringOffset EffectDesOffset) { builder.AddOffset(20, EffectDesOffset.Value, 0); }
  public static void AddTexturePath(FlatBufferBuilder builder, StringOffset TexturePathOffset) { builder.AddOffset(21, TexturePathOffset.Value, 0); }
  public static Offset<TablePropItemRowData> EndTablePropItemRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TablePropItemRowData>(o);
  }
};

public struct TablePropItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TablePropItem GetRootAsTablePropItem(ByteBuffer _bb) { return GetRootAsTablePropItem(_bb, new TablePropItem()); }
  public static TablePropItem GetRootAsTablePropItem(ByteBuffer _bb, TablePropItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TablePropItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TablePropItemRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (TablePropItemRowData?)(new TablePropItemRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TablePropItem> CreateTablePropItem(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TablePropItem.AddDatalist(builder, datalistOffset);
    return TablePropItem.EndTablePropItem(builder);
  }

  public static void StartTablePropItem(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<TablePropItemRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<TablePropItemRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TablePropItem> EndTablePropItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TablePropItem>(o);
  }
};

